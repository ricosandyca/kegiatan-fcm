rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * Is the user authorized function
     * @returns {Boolean} value of result
     */
    function isAuthorized () {
      return request.auth != null
    }

    /**
     * Is the request data matching with the authorized user id
     * @returns {Boolean} value of result
     */
    function isValidUserRequest () {
      return request.resource.data.userId == request.auth.uid
    }

    /**
     * Is the resource data matching with the authorized user id
     * @returns {Boolean} value of result
     */
    function isValidUserResource () {
    	return resource.data.userId == request.auth.uid
    }

    match /tasks/{taskId} {
    	allow read: if isAuthorized() && isValidUserResource();
      allow create: if isAuthorized() && isValidUserRequest();
      allow update: if isAuthorized()
      	&& isValidUserResource()
        && isValidUserRequest();
      allow delete: if isAuthorized() && isValidUserResource();

      /**
       * Get current task data
       * @returns {Object} value of current task data
       */
      function getTaskData () {
      	return get(/databases/$(database)/documents/tasks/$(taskId)).data
      }

      match /{subcollection=**} {
      	allow read, write: if getTaskData().userId == request.auth.uid;
      }
    }

  }
}
